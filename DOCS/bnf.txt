<--TABLE DEFINITION-->


<table_def> ::= 'CREATE TABLE' <db_name>'.'<virtual_table_name> [WITH
BASE=<base_variable>] 'AS SELECT * FROM' <struct_type> ';'

<db_name> ::= 'identifier'

<virtual_table_name> ::= 'identifier'

<base_variable> ::= 'identifier'

<struct_type> ::= <container> | <object>

<container> ::= <stl_class> '<' <type>
<--if associative container-->
	    [',' <type>] '>' ['*']

<stl_class> ::= 'list' | 'vector' | 'deque' | 'set' | 
		  'multiset' | 'map' | 'multimap'

<type> ::= <struct_type> | <primitive_data_type> ['*']

<object> ::= <class_name> ['*']

<--Instruct the parser to use the respective CREATE ELEMENT TABLE when
both are defined.-->
<element_table_choice> ::= 'USE ELEMENT' (<virtual_table_name> |
		       <struct_type_name>)

<struct_type_name> ::= 'name_of_<struct_type>_for_virtual_table'

<--ELEMENT TABLE DEFINITION-->


<element_table_def> ::= 'CREATE ELEMENT TABLE' <element_name> '{' <column_def> {',' <column_def>} '}'

<element_name> ::= 'identifier'

<column_def> ::= (<column_name>
			( <primitive_column_def> | <struct_column_def>)  
			(<access_statement> | 'self')) | <element_table_reuse>

<column_name> ::= 'identifier'

<primitive_column_def> ::=  <primitive_data_type> 'FROM'

<primitive_data_type> ::= 'int' | 'string' | 'double' | 'char' |
	    	 'float' | 'real' | 'bool'

<struct_column_def> ::= 'INT FROM' [<typesafe_column_def>]

<typesafe_column_def> ::= 'TABLE' <virtual_table_name> 'WITH BASE='

<access_statement> ::= 'how_access:eg_function_name()'

<--Instruct the parser to fill a current element from one defined
previously by referencing the element table's name
<element_table_reuse> ::= '#' <element_name>

<--CREATE VIEW DEFINITION-->


<create_view_def> ::= 'CREATE VIEW' <view_name> 'AS SELECT * FROM'
		  <virtual_table_name> {',' <virtual_table_name>}
		  WHERE <constraint> {'AND' <constraint>}

<view_name> ::= 'identifier'

<constraint> ::= 'constraint_expression'

PiCO QL is a C/C++ plug-in library that sets up an
SQL SELECT web-accessible interactive interface over C/C++ data structures.

For C++ applications, PiCO QL supports querying of
containers compatible with the C++ SGI
[http://www.sgi.com/tech/stl/ForwardContainer.html forward container]
and [http://www.sgi.com/tech/stl/ForwardIterator.html forward iterator]
concept. The container classes of the STL consist a prime
example of such. PiCO QL provides concept checks to
verify that containers follow the above concepts.
It also supports querying of custom containers (using the
[https://github.com/mfragkoulis/PiCO_QL/wiki/Fast-track-roll-your-own-probes#wiki-Loop_variants 
USING LOOP] directive) and mere objects. See the
[https://github.com/mfragkoulis/PiCO_QL/wiki/the-PiCO-QL-C%2C-CPP-app-tutorial 
PiCO QL for C/C++ applications] tutorial.

For C applications, PiCO QL supports querying of data
structures like arrays and linked lists (see [https://github.com/mfragkoulis/PiCO_QL/blob/master/examples/CApp examples/CApp])
but also any other data structure for which users
will provide a loop variant (using the
[https://github.com/mfragkoulis/PiCO_QL/wiki/Fast-track-roll-your-own-probes#wiki-Loop_variants 
USING LOOP] directive). It also supports querying of mere structs.

PiCO QL is also configurable as a loadable Linux kernel module.
It provides both a ''/proc'' and a
high-level web interface to be able to issue SQL queries
against kernel data structures. Currently PiCO QL supports
data structures modelling processes (such as the linked
list of processes) , files, virtual memory, file system,
network, namespaces, devices, busses etc. Support is
extensible to include more data structures. See
[https://github.com/mfragkoulis/PiCO_QL/wiki/Fast-track-roll-your-own-probes 
Fast track roll your own probes] tutorial in the
[https://github.com/mfragkoulis/PiCO_QL/wiki/the-PiCO-QL-Linux-kernel-module-tutorial 
PiCO QL LKM wiki].

==Platforms==

   Userspace:
     Tested under Mac OS X 10.6.7-8, 10.8.5
                  Linux 2.6
   Kernel:
     Tested on:
       Architectures: x86_64, amd64
       Distributions - kernels: Fedora 18 - 3.6.9, 3.8.2, 3.9.2, 3.14.4
                                Debian 7.1 - 3.2.0, 
                                Ubuntu server 10.04 - 2.6.32

==Testing==

* Userspace: Commits are verified against: 
** [https://github.com/mfragkoulis/PiCO_QL/blob/master/examples test cases] by executing a [https://github.com/mfragkoulis/PiCO_QL/blob/master/examples/test_all.sh script].
** [http://valgrind.org/ Valgrind] (installed in Debian GNU/Linux 6.0.7 - kernel 2.6.32).
* Kernel: Commits are verified
** against an array of [https://github.com/mfragkoulis/PiCO_QL/blob/master/src/Linux-kernel-mod/server/picoQL-tests.sql SQL queries] by executing a [https://github.com/mfragkoulis/PiCO_QL/blob/master/src/Linux-kernel-mod/server/picoQL-auto-test.sh script].
** by executing the [http://linux-test-project.github.io Linux Test Project (LTP)] test suite (not done for every commit).

==Dependencies==

* [http://www.ruby-lang.org/en Ruby]
   Part of the library's source code (the
   parser/code generator) is written in Ruby.

* [http://www.sqlite.org SQLite3]
   While PiCO QL does not use a database or other store
   to copy and/or store data, it uses the virtual
   table (VT) mechanism of Sqlite3 to provide a relational
   representation of the underlying data model.

* [http://swill.sourceforge.net SWILL]
   Once plugged in an application, PiCO QL uses the same 
   or a separate thread and utilises the SWILL library to
   present a local server with a web-like, user
   friendly query interface. In case of the kernel
   configuration this interface wraps the /proc interface.

* [http://www.boost.org Boost]
   For C++ the library accepts any container iterable
   in some fashion and provides concept checks (compile-time),
   implemented by Boost, for containers modelled 
   after the ForwardContainer and ForwardIterator concepts

==Package Structure==

* At the ''examples/'' directory, users can browse:
Several implemented userspace application example scenarios 
which can be executed effortlessly (provided the
dependencies are installed in one's system):

        cd examples/ && test_all.sh

or

        cd examples/<worked-example-dir>/ && test.sh

to run the tests of a particular example. Behind the scenes
''test.sh'' does:

        ruby generator.rb pico_ql_dsl.sql [debug] [kernel] [C] [no_mem_mgt] [concept_check]

        make
with various 
[https://github.com/mfragkoulis/PiCO_QL/wiki/Plug-in-process#compile-options 
configuration options]

        ./<executable>

* At the ''bin/'' directory reside image files that PiCO QL uses.

* At the ''doc/'' directory there is the BNF of the DSL that grounds the user description syntax and the wiki pages.

* At ''src/'' directory, the library's source code is found.

SQTL is a C/C++ plug-in library that sets up an SQL SELECT
interface over containers compatible with the C++ SGI 
forward container concept (http://www.sgi.com/tech/stl/ForwardContainer.html). 
The container classes of the STL consist a prime 
example of such.

PLATFORMS

   Tested under Mac OS X 10.6.8.


DEPENDENCIES

-Ruby (http://www.ruby-lang.org/en)
   Part of the library's source code (the description
   parser/code generator) is written in Ruby.

-Sqlite3 (http://www.sqlite.org)
   While SQTL does not use a database or other store 
   to copy and/or store data, it uses the virtual 
   table (VT) mechanism of Sqlite3 to fake the 
   underlying data model.

-SWILL (http://swill.sourceforge.net)
   Once plugged in an application, SQTL opens a 
   separate thread and uses the SWILL library to 
   present a local server with a web-like, user 
   friendly query interface.

-Boost (http://www.boost.org)
   The library accepts any container modelled by the 
   ForwardContainer concept. To ensure this is the case,
   the library carries out a concept-check (compile-time 
   check) as implemented by Boost.

SQTL PACKAGE STRUCTURE

   At the EXAMPLES directory, users can browse:
      - Examples.ods, which contains description 
      	examples and the matchings 
      	at different levels (C++, description, SQL 
	CREATE, SQL SELECT). The first three example 
	scenarios have been implemented and can be 
	executed effortlessly (provided the 
	dependencies are installed in one's system)
	by executing test_all.sh located in examples/ or
	from within the worked example directories 
	(Bank_App, Chess, VRP):
	1. "ruby generator.rb input.txt" ["typesafe"] 
	   	 	      		 ["debug"]
	2. "make" ["RELEASE=1"] | ["TYPESAFE=1"]
	3. "./<executable>"

   At the bin directory reside binary files that 
   SQTL uses.

   At the doc directory there is the BNF of the DSL 
   that grounds the user description syntax and the user
   manual.

   At src directory, the library's source code is 
   found.

<--TABLE DEFINITION-->


<table_def> ::= 'CREATE TABLE' <db_name>'.'<virtual_table_name> [WITH
BASE=<base_variable>] 'AS SELECT * FROM' <struct_type> ';'

<db_name> ::= 'identifier'

<virtual_table_name> ::= 'identifier'

<base_variable> ::= 'identifier'

<struct_type> ::= <container> | <object>

<container> ::= <container_class> '<' <type>
<--if associative container-->
	    [',' <type>] '>' ['*']

<container_class> ::= <stl_class> | <other_container_class>
 
<stl_class> ::= 'list' | 'vector' | 'deque' | 'set' | 
		  'multiset' | 'map' | 'multimap'

<other_container_class> ::= 'SGI_container_concept_compatible'

<type> ::= <struct_type> | <primitive_data_type> ['*']

<object> ::= <class_name> ['*']

<--ELEMENT TABLE DEFINITION-->


<element_table_def> ::= 'CREATE ELEMENT TABLE' <element_name> '{' <column_def> {',' <column_def>} '}'

<element_name> ::= 'identifier'

<column_def> ::= (<column_name>
			( <primitive_column_def> | <struct_column_def>)  
			(<access_statement> | 'self')) | <element_table_reuse>

<column_name> ::= 'identifier'

<primitive_column_def> ::=  <primitive_data_type> 'FROM'

<primitive_data_type> ::= 'int' | 'string' | 'double' | 'char' |
	    	 'float' | 'real' | 'bool'

<struct_column_def> ::= 'INT FROM' [<typesafe_column_def>]

<typesafe_column_def> ::= 'TABLE' <virtual_table_name> 'WITH BASE='

<access_statement> ::= 'how_access:eg_function_name()'

<--Instruct the parser to fill a current element from one defined
previously by referencing the element table's name
<element_table_reuse> ::= '#' <element_name> ['FROM' <access_statement>]

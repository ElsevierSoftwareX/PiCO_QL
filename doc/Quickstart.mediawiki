1. Download the project's source code tree, e.g. '''git clone git@github.com:mfragkoulis/PiCO_QL.git'''

2. Navigate and enter to the downloaded directory ''PiCO_QL''.

3. Copy the contents of the ''src/'' source code folder in your application's source code folder, where the  C++ object collections of interest are located.

4. Describe the collection(s) using the DSL, e.g. for the simple C++ source code provided below:
```c
                        #include <vector>
                        #include "Car.h"
                        using namespace std;
                        int main() {
                            vector<Car> cars;
                            car c1(plate, brand, model, color, horse_power);
                            ...
                            cars.push_back(c1);
                            ...
                        }
```
the required definitions would be the following:
 <nowiki>                       #include <vector>
                        #include "Car.h"
                        using namespace std;
                        ;
                        CREATE ELEMENT TABLE Car (
                             colPlate STRING FROM get_plate(),
                             brandCol STRING FROM brand,
                             col_model STRING FROM model,
                             color STRING FROM color,
                             power INT FROM horse_power
                         );

                         CREATE TABLE CarsDB.AllCars
                         WITH BASE = cars AS 
                         SELECT * FROM vector<Car>;</nowiki>
According to the latter definition, virtual table AllCars will belong to database CarsDB. This is only a representation, i.e. a virtual table. Only the table schema will be stored and no physical storage for data will be occupied.

5. Add the header file '''#include pico_ql_search.h''' and the calls to the library '''pico_ql_register(void *data_structure, const char *ds_name);''', '''pico_ql_serve();''' into a convenient place of the source code file, where your object collections are located. The former function makes a described collection available to the library, the latter initiates the library as in:
```c
                         #include <vector>
                         #include "Car.h"
                         #include "pico_ql_search.h"              // Include library header file.
                         using namespace std;
                         int main() {
                             vector<Car> cars;
                             car c1(plate, brand, model, color, horse_power);
                             ...
                             cars.push_back(c1);
                             ...
                             pico_ql_register(&cars, "cars");     /* Export the collection and register it   
                                                                   * with the library.
                                                                   */
                             while (pico_ql_serve())            // Start the query interface.
                                      ;
                         }
```

6. Execute:
 <nowiki>                        ruby pico_ql_generator.rb pico_ql_dsl.sql [typesafe]
                         -> Created/updated pico_ql_search.cpp .
                         -> Created/updated pico_ql_makefile.append .</nowiki>

7. The generated file pico_ql_makefile.append is a guideline for modifying your application's makefile to compile with the PiCO QL library. There are three actions that need to be settled (shortened example follows).
* Copy the targets and dependencies for the library's source code files from ''pico_ql_makefile.append'' to your application's makefile (the last five lines in the example below).
* Embed the dependencies and recipe aimed for the linker from ''pico_ql_makefile.append'' to your application's makefile (the first three lines in the example below).
* Include ''pico_ql_search.h'' in the dependencies of the makefile target that matches the above mentioned modified source code file (see the fourth line in the example below).
 <nowiki>           1            OBJ=main.o Car.o pico_ql_search.o pico_ql_vt.o pico_ql_interface.o pico_ql_search_helper.o pico_ql_test.o
            2            executable: $(OBJ)
            3                    $(CXX) -lswill -lsqlite3 $(CXXFLAGS) $(OBJ) -o $@
            4            main.o: main.cpp Car.h pico_ql_search.h
            5            Car.o: Car.cpp Car.h
            6            pico_ql_search.o: pico_ql_search.cpp pico_ql_search.h pico_ql_interface.h pico_ql_search_helper.h
            7            pico_ql_vt.o: pico_ql_vt.c pico_ql_vt.h pico_ql_search.h
            8            pico_ql_interface.o: pico_ql_interface.c pico_ql_interface.h pico_ql_vt.h pico_ql_test.h
            9            pico_ql_search_helper.o: pico_ql_search_helper.cpp pico_ql_search_helper.h pico_ql_search.h
           10            pico_ql_test.o: pico_ql_test.c pico_ql_test.h</nowiki>


8. Compile with:
 <nowiki>                        make </nowiki>
For a complete list see [[Plug in process#Compile options|Compile options]]. 

9. Execute application and open browser at:
 <nowiki>                        http://localhost:8080</nowiki>

// Retrieves column values of virtual table <%= @name %>.
int <%= @name %>_vt::operator() (sqlite3_vtab_cursor *cur, int nCol, sqlite3_context *con) {
    picoQLTableCursor *stcsr = (picoQLTableCursor *)cur;
    vector<<% @signature.chomp('*') %>::iterator> *res = (vector<<% @signature.chomp('*') %>::iterator> *)stcsr->resultSet;
    vector<<% @signature.chomp('*') %>::iterator>::iterator *resIter = (vector<<% @signature.chomp('*') %>::iterator>::iterator *)stc->resultSetIter;     
    if (struct_is_empty_null(cur, con)) return SQLITE_OK; 
<%    if /\*/.match(@pointer) == nil %>
<%      sign_retype = "#{@signature}*" %>
<%      sign_untype = @signature %>
<%    else %>
<%      sign_retype = @signature %>
<%      sign_untype = @signature.chomp("*") %>
<%    end %>
    <%= sign_retype %> any_dstr = (<%= sign_retype %>)stcsr->source;
#line <%= @signature_line + 1 %> "<%= $argF %>" 
<%    if @include_text_col > 0 %>
#ifdef PICO_QL_HANDLE_POLYMORPHISM
    vector<string*> *tr = (vector<string*> *)stcsr->textResults;
#endif
<%    end %>
<%    if @container_class.length > 0 %>
    if (*resIter >= any_dstr->end()) {
        sqlite3_result_text(con, "(invalid_rownum)", -1, SQLITE_STATIC);
	return SQLITE_OK;
    }
<%    end %>

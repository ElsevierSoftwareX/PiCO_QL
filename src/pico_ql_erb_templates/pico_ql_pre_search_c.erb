// Filters column values of virtual table <%= @name %>.
int <%= @name %>_vt_search (sqlite3_vtab_cursor *cur, int op, int nCol, sqlite3_value *val, struct Vtbl *vtbl) {
  picoQLTable *picoQL = (picoQLTable *)cur->pVtab;
  picoQLTableCursor *stcsr = (picoQLTableCursor *)cur;
  cursor **cursors = ((<%= @name %>_vt *)vtbl)->cursors;
  size_t cursorsSize = ((<%= @name %>_vt *)vtbl)->cursorsSize;
<%      if @base_var.length == 0 %>
  size_t chargedSize = ((<%= @name %>_vt *)vtbl)->chargedSize;
  int recursive = ((<%= @name %>_vt *)vtbl)->recursive;
<%      end %>
<%      if /\*/.match(@signature_pointer) == nil %>
<%        sign_retype = "#{@signature}*" %>
<%      else %>
<%        sign_retype = @signature %>
<%      end %>
<%      if /\*/.match(@pointer) == nil %>
<%        type_retype = "#{@type}*" %>
<%      else %>
<%        type_retype = @type %>
<%      end %>
  <%= sign_retype %> any_dstr;  
<%      if @container_class.length > 0 %>
  <%= @name %>_decl(iter);
  int index = 0;
  ResultSet *rs;
<%        if $argLB == "CPP" %>
  int i = 0;
  int found = 0;
<%        end %>
<%      end %>
  int j = 0;
  int first_constr = stcsr->first_constr;
  (void)picoQL;	// Silence compiler unused variable warning
  while ((j < (int)cursorsSize) && (cursors[j]->cur != cur)) {j++;}
  if (j == (int)cursorsSize) {
    cursor *c;
<%      if @container_class.length > 0 %>
    <%= @name %>ResultSetImpl *resImpl;
<%      end %>
    ((<%= @name %>_vt *)vtbl)->cursorsSize++;
    cursorsSize = ((<%= @name %>_vt *)vtbl)->cursorsSize;
    c = sqlite3_malloc(sizeof(cursor));
    if (c == NULL)
      return SQLITE_NOMEM;
    c->cur = cur;
<%      if @container_class.length > 0 %>
    resImpl = (<%= @name %>ResultSetImpl *)sqlite3_malloc(sizeof(<%= @name %>ResultSetImpl));
    if (resImpl == NULL)
      return SQLITE_NOMEM;
    resImpl->r.size = 0;
    resImpl->r.actualSize = 0;
    resImpl->r.offset = -1;
    resImpl->r.resultSetIterState = -1;
    c->res = &resImpl->r;
    resImpl->res = (<%= @type.chomp('*') %> **)sqlite3_malloc(sizeof(<%= @type.chomp('*') %> *));
    if (resImpl->res == NULL)
      return SQLITE_NOMEM;
<%      else %>
<%# ResultSet unused for object %>
    c->res = NULL;
<%      end %>
    ((<%= @name %>_vt *)vtbl)->cursors = (cursor **)sqlite3_realloc(((<%= @name %>_vt *)vtbl)->cursors, sizeof(cursor *)*cursorsSize);
    if (((<%= @name %>_vt *)vtbl)->cursors == NULL)
      return SQLITE_NOMEM;
    cursors = ((<%= @name %>_vt *)vtbl)->cursors;
    ((<%= @name %>_vt *)vtbl)->cursors[cursorsSize-1] = c;
#ifdef PICO_QL_DEBUG
    printf("Table %s, Cursor: %li inserted, max size %i\n", picoQL->zName, (long int)cur, stcsr->max_size);
#endif
  }
<%      if @container_class.length > 0 %>
  rs = cursors[j]->res;
<%      end %>
  if (struct_empty_null(cur, val, picoQL->embedded, nCol)) {
<%      if @container_class.length == 0 %>
    stcsr->size = 1;
<%	else %>
<%        @pointer.match(/\*/) ? retype = "" : retype = "*" %>
    <%= @type %><%= retype %> dummy = NULL;
    rs->size = 0;
    rs->actualSize = 0;
    rs->size++;
    rs->actualSize++;
    ((<%= @name %>ResultSetImpl *)rs)->res = (<%= type_retype %>*)sqlite3_realloc(((<%= @name %>ResultSetImpl *)rs)->res, sizeof(<%= type_retype %>)*rs->size);
    if (((<%= @name %>ResultSetImpl *)rs)->res == NULL)
      return SQLITE_NOMEM;
    ((<%= @name %>ResultSetImpl *)rs)->res[rs->size - 1] = dummy;
    rs->offset = 0;
<%      end %>
    return SQLITE_OK;
  }
  any_dstr = (<%= sign_retype %>)stcsr->source;
<%      if $argD == "DEBUG" %>
#line <%= @signature_line + 1 %> "<%= $argF %>" 
<%      end %>
<%      if @base_var.length > 0 %>
<%        if (@signature <=> @type) != 0 %>
<%          if @loop_root.length > 0 %>
  if (<%= @loop_root %> == NULL) {
<%            if @container_class.length == 0 %>
    stcsr->size = 1;
<%            else %>
<%              @pointer.match(/\*/) ? retype = "#{@type}" : retype = "#{@type}*" %>
    <%= retype %> dummy = NULL;
    rs->size = 0;
    rs->actualSize = 0;
    ((<%= @name %>ResultSetImpl *)rs)->res = (<%= type_retype %>*)sqlite3_realloc(((<%= @name %>ResultSetImpl *)rs)->res, sizeof(<%= type_retype %>)*rs->size);
    if (((<%= @name %>ResultSetImpl *)rs)->res == NULL)
      return SQLITE_NOMEM;
    ((<%= @name %>ResultSetImpl *)rs)->res[rs->size - 1] = dummy;
    rs->offset = 0;
<%            end %>
    return SQLITE_OK;
  }
<%          end %>
<%        end %>
<%      end %>
  if (first_constr)
    stcsr->first_constr = 0;
  if (val == NULL) {
<%      if @base_var.length > 0 %>
<%        if @container_class.length > 0 %>
<%          if @@C_container_types.include?(@container_class) %>
    <%= display_loop("any_dstr") %> {
<%          end %>
      rs->size++;
      rs->actualSize++;
      ((<%= @name %>ResultSetImpl *)rs)->res = (<%= type_retype %>*)sqlite3_realloc(((<%= @name %>ResultSetImpl *)rs)->res, sizeof(<%= type_retype %>)*rs->size);
      if (((<%= @name %>ResultSetImpl *)rs)->res == NULL)
        return SQLITE_NOMEM;
      ((<%= @name %>ResultSetImpl *)rs)->res[rs->size - 1] = iter;
    }
<%        else %>
    stcsr->size = 1;
<%        end %>
<%      else %>
    printf("Searching embedded VT <%= @name %> with no BASE constraint makes no sense.\n");
    return SQLITE_MISUSE;
<%      end %>
  } else {
<%      if @base_var.length == 0 %>
    if (first_constr) {
      if (equals(picoQL->azColumn[nCol], "base")) {
        int chSize = chargedSize;
        int cuSize = cursorsSize;
        if ((cuSize == chSize) || (cuSize == chSize - recursive)) {
#ifdef ENVIRONMENT64
          stcsr->source = (void *)sqlite3_value_int64(val);
#else
          stcsr->source = (void *)sqlite3_value_int(val);
#endif
          if (stcsr->source == NULL) {
<%        if @container_class.length == 0 %>
            stcsr->size = 1;
<%	  else %>
<%            @pointer.match(/\*/) ? retype = "" : retype = "*" %>
            <%= @type %><%= retype %> dummy = NULL;
// BASE is first constraint by default, so no need to delete resultset here.
            rs->size++;
            rs->actualSize++;
            ((<%= @name %>ResultSetImpl *)rs)->res = (<%= type_retype %>*)sqlite3_realloc(((<%= @name %>ResultSetImpl *)rs)->res, sizeof(<%= type_retype %>)*rs->size);
            if (((<%= @name %>ResultSetImpl *)rs)->res == NULL)
              return SQLITE_NOMEM;
            ((<%= @name %>ResultSetImpl *)rs)->res[rs->size - 1] = dummy;
<%        end %>
            stcsr->isInstanceNULL = 1;
            return SQLITE_OK;
          }
          stcsr->isInstanceNULL = 0;
          any_dstr = (<%= sign_retype %>)stcsr->source;
<%        if (@signature <=> @type) != 0 %>
<%          if @loop_root.length > 0 %>
          if (<%= @loop_root %> == NULL) {
<%            if @container_class.length == 0 %>
    stcsr->size = 1;
<%            else %>
<%              @pointer.match(/\*/) ? retype = "#{@type}" : retype = "#{@type}*" %>
            <%= retype %> dummy = NULL;
            rs->size = 0;
            rs->actualSize = 0;
            ((<%= @name %>ResultSetImpl *)rs)->res = (<%= type_retype %>*)sqlite3_realloc(((<%= @name %>ResultSetImpl *)rs)->res, sizeof(<%= type_retype %>)*rs->size);
            if (((<%= @name %>ResultSetImpl *)rs)->res == NULL)
              return SQLITE_NOMEM;
            ((<%= @name %>ResultSetImpl *)rs)->res[rs->size - 1] = dummy;
<%            end %>
            stcsr->isInstanceNULL = 1;
            return SQLITE_OK;
          }
<%          end %>
<%        end %>
<%        if @container_class.length > 0 %>
          if ((stcsr->max_size = (int)<%= @name %>_vt_get_datastructure_size(cur, cur->pVtab)) == 0) {
<%          @pointer.match(/\*/) ? retype = "" : retype = "*" %>
            <%= @type %><%= retype %> dummy = NULL;
            stcsr->isInstanceEmpty = 1;
            rs->size++;
            rs->actualSize++;
            ((<%= @name %>ResultSetImpl *)rs)->res = (<%= type_retype %>*)sqlite3_realloc(((<%= @name %>ResultSetImpl *)rs)->res, sizeof(<%= type_retype %>)*rs->size);
            if (((<%= @name %>ResultSetImpl *)rs)->res == NULL)
              return SQLITE_NOMEM;
            ((<%= @name %>ResultSetImpl *)rs)->res[rs->size - 1] = dummy;
            return SQLITE_OK;
          } else {
#ifdef PICO_QL_DEBUG
            printf("VT %s instance changed.\n", picoQL->zName);
#endif
          }
<%        end %>
          stcsr->isInstanceEmpty = 0;
        } else {
          printf("Searching embedded VT <%= @name %> with invalid BASE constraint (%i<>%i), recursive is %i.\n", cuSize, chSize, recursive);
          return SQLITE_MISUSE;
        }
      } else { 
        printf("Searching embedded VT <%= @name %> with first constraint other than BASE constraint.\n");
        return SQLITE_MISUSE;
      }
    }
<%      end %>
#ifdef PICO_QL_DEBUG
  printf("Searching column %i of VT %s, first_constraint %i\n", nCol, picoQL->zName, first_constr);
#endif

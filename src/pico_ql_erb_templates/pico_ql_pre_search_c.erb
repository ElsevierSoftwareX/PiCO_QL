// Filters column values of virtual table <%= @name %>.
int <%= @name %>_vt_search (sqlite3_vtab_cursor *cur, int op, int nCol, sqlite3_value *val, struct Vtbl *vtbl) {
  picoQLTable *picoQL = (picoQLTable *)cur->pVtab;
  picoQLTableCursor *stcsr = (picoQLTableCursor *)cur;
  cursor **cursors = ((<%= @name %>_vt *)vtbl)->cursors;
  size_t cursorsSize = ((<%= @name %>_vt *)vtbl)->cursorsSize;
  int checkedSize = 0;
<%      if @base_var.length == 0 %>
  size_t chargedSize = ((<%= @name %>_vt *)vtbl)->chargedSize;
  int recursive = ((<%= @name %>_vt *)vtbl)->recursive;
<%      end %>
<%      if /\*/.match(@signature_pointer) == nil %>
<%        sign_retype = "#{@signature}*" %>
<%      else %>
<%        sign_retype = "#{@signature}" %>
<%      end %>
<%      if /\*/.match(@pointer) == nil %>
<%        type_retype = "#{@type}*" %>
<%      else %>
<%        type_retype = "#{@type}" %>
<%      end %>
<%      if /\[/.match(@signature) %>
  <%= @assignable_signature.gsub("<variable_name>", "any_dstr") %>;
<%      else %>
  <%= sign_retype %> any_dstr;  
<%      end %>
<%      if @loop.match(/\Witer\W/) %>
  <%= @name %>_decl(iter);
  int index = 0;
  ResultSet *rs;
<%        if $argLB == "CPP" %>
  int i = 0;
  int found = 0;
<%        end %>
<%      end %>
  int j = 0, chs = 0;
  int first_constr = stcsr->first_constr;
  (void)picoQL;	// Silence compiler unused variable warning
  while ((j < (int)cursorsSize) && (cursors[j]->cur != cur)) {j++;}
  if (j == cursorsSize) {
    printf("Cursor %lx not registered. Exiting now.\n", (long)cur);
    return SQLITE_ERROR;
  } 
<%      if @container_class.length > 0 %>
  rs = cursors[j]->res;
<%      end %>
  if (struct_empty_null(cur, val, picoQL->embedded, nCol)) {
<%      if @container_class.length == 0 %>
    stcsr->size = 1;
<%	else %>
<%        @pointer.match(/\*/) ? retype = "" : retype = "*" %>
    <%= @type %><%= retype %> dummy = NULL;
    rs->size = 0;
    rs->actualSize = 0;
    rs->size++;
    rs->actualSize++;
    ((<%= @name %>ResultSetImpl *)rs)->res = (<%= type_retype %>*)sqlite3_realloc(((<%= @name %>ResultSetImpl *)rs)->res, sizeof(<%= type_retype %>)*rs->size);
    if (((<%= @name %>ResultSetImpl *)rs)->res == NULL)
      return SQLITE_NOMEM;
    rs->malloced = 1;
    ((<%= @name %>ResultSetImpl *)rs)->res[rs->size - 1] = dummy;
    rs->offset = 0;
<%      end %>
    return SQLITE_OK;
  }
  if (!((picoQLTableCursor *)cur)->active_checked) {
    ((picoQLTableCursor *)cur)->active_checked = 1;
    if (((picoQLTableCursor *)cur)->active_verify) {
      int count = 0;
      while (chs < (int)cursorsSize) {
        if (cursors[chs]->open) {
          if (((picoQLTableCursor *)cursors[chs]->cur)->active_owed) {
            count++;
            ((picoQLTableCursor *)cursors[chs]->cur)->active_verify = 1;
            ((picoQLTableCursor *)cursors[chs]->cur)->active_owed = 0;
          }
        }
        chs++;
      }
      chs = 0;
      ((picoQLTableCursor *)cur)->active_verify = 0;
      if (count > 1) {
        printf("WARNING: Table %s, cursor: %lx, More active_owed than 1.\n", picoQL->zName, (long)cur);
      }
#ifdef PICO_QL_DEBUG
      printf("Table %s, Verified mismatched cursor: %lx.\n", picoQL->zName, (long)cur);
#endif
    }
#ifdef PICO_QL_DEBUG
    printf("Table %s, Checked cursor: %lx.\n", picoQL->zName, (long)cur);
#endif
  }
  while (chs < (int)cursorsSize) {
    if (cursors[chs]->open)
      checkedSize += ((picoQLTableCursor *)cursors[chs]->cur)->active_checked;
    chs++;
  }
  any_dstr = (<%= sign_retype %>)stcsr->source;
<%      if $argD == "DEBUG" %>
#line <%= @signature_line + 1 %> "<%= $argF %>" 
<%      end %>
<%      if @base_var.length > 0 %>
<%        if (@signature <=> @type) != 0 %>
<%          if @loop_root.length > 0 %>
  if (<%= @loop_root %> == NULL) {
<%            if @container_class.length == 0 %>
    stcsr->size = 1;
<%            else %>
<%              @pointer.match(/\*/) ? retype = "#{@type}" : retype = "#{@type}*" %>
    <%= retype %> dummy = NULL;
    rs->size = 0;
    rs->actualSize = 0;
    rs->size++;
    rs->actualSize++;
    ((<%= @name %>ResultSetImpl *)rs)->res = (<%= type_retype %>*)sqlite3_realloc(((<%= @name %>ResultSetImpl *)rs)->res, sizeof(<%= type_retype %>)*rs->size);
    if (((<%= @name %>ResultSetImpl *)rs)->res == NULL)
      return SQLITE_NOMEM;
    rs->malloced = 1;
    ((<%= @name %>ResultSetImpl *)rs)->res[rs->size - 1] = dummy;
    rs->offset = 0;
<%            end %>
    return SQLITE_OK;
  }
<%          end %>
<%        end %>
<%      end %>
  if (first_constr)
    stcsr->first_constr = 0;
  if (val == NULL) {
<%      if @base_var.length > 0 %>
<%        if @container_class.length > 0 %>
<%          if @@C_container_types.include?(@container_class) %>
<% loop = display_loop("any_dstr") %>
<% loop.gsub!(/<space>/, "    ") %>
<%# Generate spacing for nested loops %>
    <%= loop %> {
      if (iter == NULL) continue;
<%          end %>
      rs->size++;
      rs->actualSize++;
      if (rs->size == rs->malloced) {
        rs->malloced *= 2;
        ((<%= @name %>ResultSetImpl *)rs)->res = (<%= type_retype %>*)sqlite3_realloc(((<%= @name %>ResultSetImpl *)rs)->res, sizeof(<%= type_retype %>) * rs->malloced);
        if (((<%= @name %>ResultSetImpl *)rs)->res == NULL)
          return SQLITE_NOMEM;
      }
      ((<%= @name %>ResultSetImpl *)rs)->res[rs->size - 1] = iter;
    }
<%          for i in 0..@nloops-1 %>
    }
<%          end %>
<%        else %>
    stcsr->size = 1;
<%        end %>
<%      else %>
    printf("Searching embedded VT <%= @name %> with no BASE constraint makes no sense.\n");
    return SQLITE_MISUSE;
<%      end %>
  } else {
<%      if @base_var.length == 0 %>
    if (first_constr) {
      if (equals(picoQL->azColumn[nCol], "base")) {
        int chSize = chargedSize;
        int cuchkSize = checkedSize;
        int cuSize = cursorsSize;
        int nEarlyRequests = ((<%= @name %>_vt *)vtbl)->nEarlyRequests;
        long *earlyRequestsArray = ((<%= @name %>_vt *)vtbl)->earlyRequestsArray;
        int nTimesCharged = ((<%= @name %>_vt *)vtbl)->nTimesCharged;
        int passClosed = 0;
        int ner = 0;
        long to_base = 0;
<%#       if @base_var.length == 0 %>
#ifdef PICO_QL_DEBUG
  printf("Table %s, cursorsSize %i, chargedSize %i, earlyRequests %i, cursorsChecked %i, nTimesCharged %i.\n", picoQL->zName, cuSize, chSize, nEarlyRequests, cuchkSize, nTimesCharged); 
#endif
#ifdef ENVIRONMENT64
        to_base = (long)sqlite3_value_int64(val);
#else
        to_base = (long)sqlite3_value_int(val);
#endif
        if (nEarlyRequests - ((<%= @name %>_vt *)vtbl)->lateMatches > 0) {
          for (ner = 0; ner < nEarlyRequests; ner++) {
#ifdef PICO_QL_DEBUG
            printf("base provided by report charged early is %lx, to_base is %lx, ner is %i, nEarlyRequests is %i.\n", earlyRequestsArray[ner], to_base, ner, nEarlyRequests);
#endif
            if (earlyRequestsArray[ner] == to_base) {
#ifdef PICO_QL_DEBUG
              printf("base sent %lx matched base provided %lx.\n", earlyRequestsArray[ner], to_base);
#endif
              //earlyRequestsArray[ner] = -1;
              ((<%= @name %>_vt *)vtbl)->lateMatches++;
              break;
            }
          }
          if (ner == nEarlyRequests) {
#ifdef PICO_QL_DEBUG
            printf("%i early service requests but to_base %lx not matched.\n", nEarlyRequests, to_base);
#endif
            return SQLITE_MISUSE;
          } else
            passClosed = 1;
        }  
        if ((cuchkSize == chSize) || 
            (cuSize == nTimesCharged) || 
            (passClosed)) {
#ifdef ENVIRONMENT64
          stcsr->source = (void *)sqlite3_value_int64(val);
#else
          stcsr->source = (void *)sqlite3_value_int(val);
#endif
          if (stcsr->source == NULL) {
<%        if @container_class.length == 0 %>
            stcsr->size = 1;
<%	  else %>
<%            @pointer.match(/\*/) ? retype = "" : retype = "*" %>
            <%= @type %><%= retype %> dummy = NULL;
// BASE is first constraint by default, so no need to delete resultset here.
            rs->size++;
            rs->actualSize++;
            ((<%= @name %>ResultSetImpl *)rs)->res = (<%= type_retype %>*)sqlite3_realloc(((<%= @name %>ResultSetImpl *)rs)->res, sizeof(<%= type_retype %>)*rs->size);
            if (((<%= @name %>ResultSetImpl *)rs)->res == NULL)
              return SQLITE_NOMEM;
            rs->malloced = 1;
            ((<%= @name %>ResultSetImpl *)rs)->res[rs->size - 1] = dummy;
<%        end %>
            stcsr->isInstanceNULL = 1;
            return SQLITE_OK;
          }
          stcsr->isInstanceNULL = 0;
          any_dstr = (<%= sign_retype %>)stcsr->source;
<%        if (@signature <=> @type) != 0 %>
<%          if @loop_root.length > 0 %>
          if (<%= @loop_root %> == NULL) {
<%            if @container_class.length == 0 %>
    stcsr->size = 1;
<%            else %>
<%              @pointer.match(/\*/) ? retype = "#{@type}" : retype = "#{@type}*" %>
            <%= retype %> dummy = NULL;
            rs->size++;
            rs->actualSize++;
            ((<%= @name %>ResultSetImpl *)rs)->res = (<%= type_retype %>*)sqlite3_realloc(((<%= @name %>ResultSetImpl *)rs)->res, sizeof(<%= type_retype %>)*rs->size);
            if (((<%= @name %>ResultSetImpl *)rs)->res == NULL)
              return SQLITE_NOMEM;
            rs->malloced = 1;
            ((<%= @name %>ResultSetImpl *)rs)->res[rs->size - 1] = dummy;
<%            end %>
            stcsr->isInstanceNULL = 1;
            return SQLITE_OK;
          }
<%          end %>
<%        end %>
<%        if !@lock_argument.empty? %>
<%          $locks.each { |l| %>
<%            if l.name == @lock_name %>
          if (picoQL->locked == 1)
            <%= l.lock_function %>(<%= @lock_argument %>);
<%              break %>
<%            end %>
<%# Lock nesting has been handled in init_result_set; already +1 %>
<%          } %>
<%        end %>
<%        if @container_class.length > 0 %>
          if ((stcsr->max_size = (int)<%= @name %>_vt_get_datastructure_size(cur, cur->pVtab)) == 0) {
<%          @pointer.match(/\*/) ? retype = "" : retype = "*" %>
            <%= @type %><%= retype %> dummy = NULL;
            stcsr->isInstanceEmpty = 1;
            rs->size++;
            rs->actualSize++;
            ((<%= @name %>ResultSetImpl *)rs)->res = (<%= type_retype %>*)sqlite3_realloc(((<%= @name %>ResultSetImpl *)rs)->res, sizeof(<%= type_retype %>)*rs->size);
            if (((<%= @name %>ResultSetImpl *)rs)->res == NULL)
              return SQLITE_NOMEM;
            rs->malloced = 1;
            ((<%= @name %>ResultSetImpl *)rs)->res[rs->size - 1] = dummy;
            return SQLITE_OK;
          } else {
#ifdef PICO_QL_DEBUG
            printf("VT %s instance changed.\n", picoQL->zName);
#endif
          }
<%        end %>
          stcsr->isInstanceEmpty = 0;
        } else {
          printf("Searching embedded VT <%= @name %> with invalid BASE constraint cursorsSize %i, chargedCursors %i, recursive is %i, checkedCursors %i, nTimesCharged %i.\n", (int)cursorsSize, chSize, recursive, cuchkSize, nTimesCharged);
          return SQLITE_MISUSE;
        }
      } else { 
        printf("Searching embedded VT <%= @name %> with first constraint other than BASE constraint.\n");
        return SQLITE_MISUSE;
      }
    }
<%      end %>
#ifdef PICO_QL_DEBUG
  printf("Searching column %i of VT %s, first_constraint %i\n", nCol, picoQL->zName, first_constr);
#endif

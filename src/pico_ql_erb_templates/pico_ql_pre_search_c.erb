// Filters column values of virtual table <%= @name %>.
static int <%= @name %>_vt_search (sqlite3_vtab_cursor *cur, int op, int nCol, sqlite3_value *val, struct Vtbl *vtbl) {
  picoQLTable *picoQL = (picoQLTable *)cur->pVtab;
  picoQLTableCursor *stcsr = (picoQLTableCursor *)cur;
  cursor **cursors = ((<%= @name %>_vt *)vtbl)->cursors;
  size_t cursorsSize = ((<%= @name %>_vt *)vtbl)->cursorsSize;
  int checkedSize = 0;
<%      if @base_var.length == 0 %>
  size_t chargedSize = ((<%= @name %>_vt *)vtbl)->chargedSize;
<%      end %>
<%      if /\*/.match(@signature_pointer) == nil %>
<%        sign_retype = "#{@signature}*" %>
<%      else %>
<%        sign_retype = "#{@signature}" %>
<%      end %>
<%      if /\*/.match(@pointer) == nil %>
<%        type_retype = "#{@type}*" %>
<%      else %>
<%        type_retype = "#{@type}" %>
<%      end %>
<%      if /\[/.match(@signature) %>
  <%= @assignable_signature.gsub("<variable_name>", "any_dstr") %>;
<%      else %>
  <%= sign_retype %> any_dstr;  
<%      end %>
<%      if @loop.match(/\Wtuple_iter\W/) %>
  <%= @name %>_decl(tuple_iter);
  int rsIndex = 0;
  ResultSet *rs;
<%        if $argLB == "CPP" %>
  int i = 0;
  int found = 0;
<%        end %>
<%      end %>
  int j = 0, chs = 0;
  int first_constr = stcsr->first_constr;
  (void)picoQL;	// Silence compiler unused variable warning
  while ((j < (int)cursorsSize) && (cursors[j]->cur != cur)) {j++;}
  if (j == cursorsSize) {
    printf("Cursor %lx not registered. Exiting now.\n", (long)cur);
    return SQLITE_ERROR;
  } 
<%      if @container_class.length > 0 %>
  rs = cursors[j]->res;
<%      end %>
  if (struct_empty_null(cur, val, picoQL->embedded, nCol)) {
<%# Hacked: seek alternative %>
<%      @pointer.match(/\*/) ? init = " = NULL" : init = " = 0" %>
<%      if @container_class.length == 0 %>
    stcsr->size = 1;
<%	else %>
<%        @pointer.match(/\*/) ? retype = "" : retype = "*" %>
    <%= @type %> dummy<%= init %>;
    rs->size = 0;
    rs->actualSize = 0;
    rs->size++;
    rs->actualSize++;
    ((<%= @name %>ResultSetImpl *)rs)->res = (<%= @type %>*)sqlite3_realloc(((<%= @name %>ResultSetImpl *)rs)->res, sizeof(<%= @type %>) * rs->size);
    if (((<%= @name %>ResultSetImpl *)rs)->res == NULL)
      return SQLITE_NOMEM;
    rs->resBts = (int *)sqlite3_realloc(rs->resBts, sizeof(unsigned int) * (rs->size / WORDBITS + 1));
    if (rs->resBts == NULL)
      return SQLITE_NOMEM;
    rs->malloced = 1;
    ((<%= @name %>ResultSetImpl *)rs)->res[rs->size - 1] = dummy;
    rs->offset = 0;
    rs->resBts[(rs->size - 1) / WORDBITS] |= (1 << ((rs->size - 1) % WORDBITS));
<%      end %>
    return SQLITE_OK;
  }
  if (!((picoQLTableCursor *)cur)->active_checked) {
    ((picoQLTableCursor *)cur)->active_checked = 1;
    if (((picoQLTableCursor *)cur)->active_verify) {
      int count = 0;
      while (chs < (int)cursorsSize) {
        if (cursors[chs]->open) {
          if (((picoQLTableCursor *)cursors[chs]->cur)->active_owed) {
            count++;
            ((picoQLTableCursor *)cursors[chs]->cur)->active_verify = 1;
            ((picoQLTableCursor *)cursors[chs]->cur)->active_owed = 0;
          }
        }
        chs++;
      }
      chs = 0;
      ((picoQLTableCursor *)cur)->active_verify = 0;
      if (count > 1) {
        printf("WARNING: Table %s, cursor: %lx, More active_owed than 1.\n", picoQL->zName, (long)cur);
      }
#ifdef PICO_QL_DEBUG
      printf("Table %s, Verified mismatched cursor: %lx.\n", picoQL->zName, (long)cur);
#endif
    }
#ifdef PICO_QL_DEBUG
    printf("Table %s, Checked cursor: %lx.\n", picoQL->zName, (long)cur);
#endif
  }
  while (chs < (int)cursorsSize) {
    if (cursors[chs]->open)
      checkedSize += ((picoQLTableCursor *)cursors[chs]->cur)->active_checked;
    chs++;
  }
  any_dstr = (<%= sign_retype %>)stcsr->source;
<%      if $argD == "DEBUG" %>
#line <%= @signature_line + 1 %> "<%= $argF %>" 
<%      end %>
<%      if @base_var.length > 0 %>
<%        if (@signature <=> @type) != 0 %>
<%          if @loop_root.length > 0 %>
  if (<%= @loop_root %> == NULL) {
<%            if @container_class.length == 0 %>
    stcsr->size = 1;
<%            else %>
<%              @pointer.match(/\*/) ? retype = "#{@type}" : retype = "#{@type}*" %>
    <%= @type %> dummy<%= init %>;
    rs->size = 0;
    rs->actualSize = 0;
    rs->size++;
    rs->actualSize++;
    ((<%= @name %>ResultSetImpl *)rs)->res = (<%= @type %>*)sqlite3_realloc(((<%= @name %>ResultSetImpl *)rs)->res, sizeof(<%= @type %>) * rs->size);
    if (((<%= @name %>ResultSetImpl *)rs)->res == NULL)
      return SQLITE_NOMEM;
    rs->resBts = (int *)sqlite3_realloc(rs->resBts, sizeof(unsigned int) * (rs->size / WORDBITS + 1));
    if (rs->resBts == NULL)
      return SQLITE_NOMEM;
    rs->malloced = 1;
    ((<%= @name %>ResultSetImpl *)rs)->res[rs->size - 1] = dummy;
    rs->offset = 0;
    rs->resBts[(rs->size - 1) / WORDBITS] |= (1 << ((rs->size - 1) % WORDBITS));
<%            end %>
    return SQLITE_OK;
  }
<%          end %>
<%        end %>
<%      end %>
  if (first_constr)
    stcsr->first_constr = 0;
  if (val == NULL) {
<%      if @base_var.length > 0 %>
<%        if @container_class.length > 0 %>
<%          if @@C_container_types.include?(@container_class) %>
<% loop = display_loop("any_dstr") %>
<% loop.gsub!(/<space>/, "    ") %>
<%# Generate spacing for nested loops %>
    <%= loop %> {
<%            if !@pointer.empty? %>
      if (tuple_iter == NULL) continue;
<%            end %>
<%          end %>
      rs->size++;
      rs->actualSize++;
      if (rs->size == rs->malloced) {
        rs->malloced *= 2;
        ((<%= @name %>ResultSetImpl *)rs)->res = (<%= @type %>*)sqlite3_realloc(((<%= @name %>ResultSetImpl *)rs)->res, sizeof(<%= @type %>) * rs->malloced);
        if (((<%= @name %>ResultSetImpl *)rs)->res == NULL)
          return SQLITE_NOMEM;
        rs->resBts = (int *)sqlite3_realloc(rs->resBts, sizeof(unsigned int) * (rs->malloced / WORDBITS + 1));
        if (rs->resBts == NULL)
          return SQLITE_NOMEM;
      }
      ((<%= @name %>ResultSetImpl *)rs)->res[rs->size - 1] = tuple_iter;
      rs->resBts[(rs->size - 1) / WORDBITS] |= (1 << ((rs->size - 1) % WORDBITS));
    }
<%          for i in 0..@nloops-1 %>
    }
<%          end %>
<%        else %>
    stcsr->size = 1;
<%        end %>
<%      else %>
#ifdef PICO_QL_DEBUG
    printf("Searching embedded VT <%= @name %> with no BASE constraint makes no sense.\n");
#endif
    printf("Empty instantiation (out of context) for VT <%= @name %>.\n");
    return SQLITE_OK;
<%      end %>
  } else {
<%      if @base_var.length == 0 %>
    if (first_constr) {
<%        if !@lock.empty? %>
      int this_lock_available = 1;
      picoQLTableCursor *ptc = NULL;
<%        end %>
      if (equals(picoQL->azColumn[nCol], "base")) {
        int chSize = chargedSize;
        int cuchkSize = checkedSize;
        int cuSize = cursorsSize;
        int nEarlyRequests = ((<%= @name %>_vt *)vtbl)->nEarlyRequests;
        long *earlyRequestsArray = ((<%= @name %>_vt *)vtbl)->earlyRequestsArray;
        int nTimesCharged = ((<%= @name %>_vt *)vtbl)->nTimesCharged;
        int passClosed = 0;
        int ner = 0;
        long to_base = 0;
<%#       if @base_var.length == 0 %>
#ifdef PICO_QL_DEBUG
  printf("Table %s, cursorsSize %d, chargedSize %d, earlyRequests %d, cursorsChecked %d, nTimesCharged %d.\n", picoQL->zName, cuSize, chSize, nEarlyRequests, cuchkSize, nTimesCharged); 
#endif
#ifdef ENVIRONMENT64
        to_base = (long)sqlite3_value_int64(val);
#else
        to_base = (long)sqlite3_value_int(val);
#endif
        if (nEarlyRequests - ((<%= @name %>_vt *)vtbl)->lateMatches > 0) {
          for (ner = 0; ner < nEarlyRequests; ner++) {
#ifdef PICO_QL_DEBUG
            printf("base provided by report charged early is %lx, to_base is %lx, ner is %d, nEarlyRequests is %d.\n", earlyRequestsArray[ner], to_base, ner, nEarlyRequests);
#endif
            if (earlyRequestsArray[ner] == to_base) {
#ifdef PICO_QL_DEBUG
              printf("base sent %lx matched base provided %lx.\n", earlyRequestsArray[ner], to_base);
#endif
              //earlyRequestsArray[ner] = -1;
              ((<%= @name %>_vt *)vtbl)->lateMatches++;
              break;
            }
          }
          if (ner == nEarlyRequests) {
#ifdef PICO_QL_DEBUG
            printf("%d early service requests but to_base %lx not matched.\n", nEarlyRequests, to_base);
#endif
            printf("Empty instantiation (out of context) for VT <%= @name %>.\n");
            return SQLITE_OK;
          } else
            passClosed = 1;
        }  
        if ((cuchkSize == chSize) || 
            (cuSize == nTimesCharged) || 
            (passClosed)) {
#ifdef ENVIRONMENT64
          stcsr->source = (void *)sqlite3_value_int64(val);
#else
          stcsr->source = (void *)sqlite3_value_int(val);
#endif
<%        if $argK == "KERNEL" %>
          if ((stcsr->source == NULL) || (!virt_addr_valid(stcsr->source))) {
<%        else %>
          if (stcsr->source == NULL) {
<%        end %>
<%        if @container_class.length == 0 %>
            stcsr->size = 1;
<%	  else %>
<%            @pointer.match(/\*/) ? retype = "" : retype = "*" %>
            <%= @type %> dummy<%= init %>;
// BASE is first constraint by default, so no need to delete resultset here.
            rs->size++;
            rs->actualSize++;
            ((<%= @name %>ResultSetImpl *)rs)->res = (<%= @type %>*)sqlite3_realloc(((<%= @name %>ResultSetImpl *)rs)->res, sizeof(<%= @type %>) * rs->size);
            if (((<%= @name %>ResultSetImpl *)rs)->res == NULL)
              return SQLITE_NOMEM;
            rs->resBts = (int *)sqlite3_realloc(rs->resBts, sizeof(unsigned int) * (rs->size / WORDBITS + 1));
            if (rs->resBts == NULL)
              return SQLITE_NOMEM;
            rs->malloced = 1;
            ((<%= @name %>ResultSetImpl *)rs)->res[rs->size - 1] = dummy;
            rs->resBts[(rs->size - 1) / WORDBITS] |= (1 << ((rs->size - 1) % WORDBITS));
<%        end %>
            stcsr->isInstanceNULL = 1;
            return SQLITE_OK;
          }
          stcsr->isInstanceNULL = 0;
          any_dstr = (<%= sign_retype %>)stcsr->source;
<%        if (@signature <=> @type) != 0 %>
<%          if @loop_root.length > 0 %>
          if (<%= @loop_root %> == NULL) {
<%            if @container_class.length == 0 %>
    stcsr->size = 1;
<%            else %>
<%              @pointer.match(/\*/) ? retype = "#{@type}" : retype = "#{@type}*" %>
            <%= @type %> dummy<%= init %>;
            rs->size++;
            rs->actualSize++;
            ((<%= @name %>ResultSetImpl *)rs)->res = (<%= @type %>*)sqlite3_realloc(((<%= @name %>ResultSetImpl *)rs)->res, sizeof(<%= @type %>) * rs->size);
            if (((<%= @name %>ResultSetImpl *)rs)->res == NULL)
              return SQLITE_NOMEM;
            rs->resBts = (int *)sqlite3_realloc(rs->resBts, sizeof(unsigned int) * (rs->size / WORDBITS + 1));
            if (rs->resBts == NULL)
              return SQLITE_NOMEM;
            rs->malloced = 1;
            ((<%= @name %>ResultSetImpl *)rs)->res[rs->size - 1] = dummy;
            rs->resBts[(rs->size - 1) / WORDBITS] |= (1 << ((rs->size - 1) % WORDBITS));
<%            end %>
            stcsr->isInstanceNULL = 1;
            return SQLITE_OK;
          }
<%          end %>
<%        end %>
<%        if @container_class.length > 0 %>
          if ((stcsr->max_size = (int)<%= @name %>_vt_get_datastructure_size(cur, cur->pVtab)) == 0) {
<%          @pointer.match(/\*/) ? retype = "" : retype = "*" %>
            <%= @type %> dummy<%= init %>;
            stcsr->isInstanceEmpty = 1;
            rs->size++;
            rs->actualSize++;
            ((<%= @name %>ResultSetImpl *)rs)->res = (<%= @type %>*)sqlite3_realloc(((<%= @name %>ResultSetImpl *)rs)->res, sizeof(<%= @type %>) * rs->size);
            if (((<%= @name %>ResultSetImpl *)rs)->res == NULL)
              return SQLITE_NOMEM;
            rs->resBts = (int *)sqlite3_realloc(rs->resBts, sizeof(unsigned int) * (rs->size / WORDBITS + 1));
            if (rs->resBts == NULL)
              return SQLITE_NOMEM;
            rs->malloced = 1;
            ((<%= @name %>ResultSetImpl *)rs)->res[rs->size - 1] = dummy;
            rs->resBts[(rs->size - 1) / WORDBITS] |= (1 << ((rs->size - 1) % WORDBITS));
            return SQLITE_OK;
          } else {
#ifdef PICO_QL_DEBUG
            printf("VT %s instance changed.\n", picoQL->zName);
#endif
          }
<%        end %>
          stcsr->isInstanceEmpty = 0;
        } else {
#ifdef PICO_QL_DEBUG
          int recursive = ((<%= @name %>_vt *)vtbl)->recursive;
          printf("Searching embedded VT <%= @name %> with invalid BASE constraint cursorsSize %d, chargedCursors %d, recursive is %d, checkedCursors %d, nTimesCharged %d.\n", (int)cursorsSize, chSize, recursive, cuchkSize, nTimesCharged);
#endif
          printf("Empty instantiation (out of context) for VT <%= @name %>.\n");
          return SQLITE_OK;
        }
      } else { 
#ifdef PICO_QL_DEBUG
        printf("Searching embedded VT <%= @name %> with first constraint other than BASE constraint.\n");
#endif
        printf("Empty instantiation (out of context) for VT <%= @name %>.\n");
        return SQLITE_OK;
      }
<%        if !@lock.empty? %>
<%          if !@lock_argument.empty? %>
<%            @lock_argument.start_with?("&") ? la = "#{@lock_argument}" : la = "&#{@lock_argument}" %>
      stcsr->lock = (long int)<%= la %>;
<%          end %>
      chs = 0;
      while (chs < (int)cursorsSize) {
        ptc = (picoQLTableCursor *)cursors[chs]->cur;
        if ((ptc != stcsr) && (ptc->locked) && (ptc->lock != 0) &&
            (stcsr->lock != 0) && (ptc->lock != stcsr->lock))
          this_lock_available = 0;
        chs++;
      }
      if ((!stcsr->locked) && (this_lock_available)) {  // 1st cond needed?
<%          if !@lock_argument.empty? %>
        <%= @lock_class.lock_function.gsub("<selector>", "#{@lock_argument}") %>;
<%          else %>
        <%= @lock_class.lock_function %>;
<%          end %>
        stcsr->locked += 1;
      }
<%        end %>
    }
<%      end %>
#ifdef PICO_QL_DEBUG
  printf("Searching column %d of VT %s, first_constraint %d\n", nCol, picoQL->zName, first_constr);
#endif

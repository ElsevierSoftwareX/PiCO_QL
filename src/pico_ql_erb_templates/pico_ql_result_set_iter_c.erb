// Returns the size (records) for each virtual table.
size_t <%= @name %>_vt_get_datastructure_size (sqlite3_vtab_cursor *cur, sqlite3_vtab *vtab) {
  picoQLTable *picoQL = (picoQLTable *)vtab;
<%      if @container_class.length > 0 %>
  picoQL->object = 0;
<%# TODO carray support %>
<%        if @container_class == "carray" %>
  if (cur != NULL) {
    picoQLTableCursor *stc = (picoQLTableCursor *)cur;
<%          /\*/.match(@pointer) == nil ? retype = "*" : retype = "" %>
<%# stc->source will definitely hold a pointer so retyping the signature
<%# as follows is correct. %>
    <%= @signature %><%= retype %> any_dstr = (<%= @signature %><%= retype %>)stc->source;
<%          if $argD == "DEBUG" %>
#line <%= @signature_line + 1 %> "<%= $argF %>" 
<%          end %>
    return any_dstr-><%= vt.size %>;
  }
<%        end %>
<%      else %>
  (void)cur;
  picoQL->object = 1;
<%      end %>
  return 1;
}


void <%= @name %>_vt_init_result_set (sqlite3_vtab *vtab, sqlite3_vtab_cursor *cur) {
  (void)vtab;
  (void)cur;
}

int <%= @name %>_vt_advance_result_set_iter (sqlite3_vtab_cursor *cur, 
                                      struct Vtbl* vtbl) {
  picoQLTableCursor *stc = (picoQLTableCursor *)cur;
  cursor **cursors = ((<%= @name %>_vt *)vtbl)->cursors;
  size_t cursorsSize = ((<%= @name %>_vt *)vtbl)->cursorsSize;
  int j = 0;
  while ((j < (int)cursorsSize) && (cursors[j]->cur != cur)) {j++;}
  if (j == (int)cursorsSize) {
    printf("In <%= @name %>_vt_next_resultSet: Cursor %li not registered.\nExiting now.\n", (long int)cur);
    return SQLITE_ERROR;
  }
  ResultSet *res = &cursors[j]->res;
<%    if @container_class.length > 0 %>
  if ((int)res->size > 0) {
    if (res->resultSetIterState == -1) {
      res->actualSize = res->size;
      res->current = 0;
      res->resultSetIterState = 1;
    } else if (res->resultSetIterState == 1) {
      res->current++;
    }
    while ((res->current < res->size) && (((<%= @name %>ResultSetImpl *)res)->res[res->current] == 0)) {res->current++;}
    if (res->current < res->size) {
#ifdef PICO_QL_DEBUG
      picoQLTable *st = (picoQLTable *)cur->pVtab;
      printf("Table %s, now res->current: %i \nstc->isEof: %i\n\n",
             st->zName, res->current, stc->isEof);
#endif
      return SQLITE_OK;
    }
  }
  stc->isEof = 1;
  res->size = 0;
  res->actualSize = 0;
  res->current = -1;
  res->resultSetIterState = -1;
<%    else %>
  stc->current++;
  if (stc->current >= stc->size)
    stc->isEof = 1;
<%    end %>
#ifdef PICO_QL_DEBUG
  picoQLTable *st = (picoQLTable *)cur->pVtab;
  printf("Table %s, stc->isEof: %i\n\n",
         st->zName, stc->isEof);
  printf("stc->current: %i, stc->size: %i\n", stc->current, stc->size);
#endif
  return SQLITE_OK;
}

void <%= @name %>_vt_deinit_result_set (sqlite3_vtab_cursor *cur, struct Vtbl *vtbl) {
  cursor **cursors = ((<%= @name %>_vt *)vtbl)->cursors;
  size_t cursorsSize = ((<%= @name %>_vt *)vtbl)->cursorsSize;
  charged **charged = ((<%= @name %>_vt *)vtbl)->charged;
  int j = 0;
  while ((j < (int)cursorsSize) && (cursors[j]->cur != cur)) {j++;}
  if (j == (int)cursorsSize) {
    printf("In <%= @name %>_vt_deinit_resultSet: Cursor %li not registered.\nExiting now.\n", (long int)cur);
    return SQLITE_ERROR;
  }
  ResultSet *res = &cursors[j]->res;
<%      if @container_class.length > 0 %>
  sqlite3_free(((<%= @name %>ResultSetImpl *)res)->res);
<%      end %>
  sqlite3_free(cursors[j]);
  cursorsSize--;
<%      if @base_var.length == 0 %>
<%# need to malloc %>
  for (int i = 0; i < (int)chargedSize; i++)
    sqlite3_free(charged[i]);
  chargedSize = 0;
  recursive = 0;
<%      end %>
}

void <%= @name %>_vt_discharge_saved_results (struct Vtbl *vtbl) {
<%      vt.columns.each { |col| %>
<%       if $argM == "MEM_MGT" && col.related_to.length > 0 && col.fk_method_ret == 1 %>
  sqlite3_free(((<%= @name %>_vt *)vtbl)->sr_<%= col.saved_results_index %>.captcha);
<%       end %>
<%      } %>
}


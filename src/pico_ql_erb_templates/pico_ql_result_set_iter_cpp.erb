// Returns the size (records) for each virtual table.
size_t <%= @name %>_vt::operator() (sqlite3_vtab_cursor *cur, sqlite3_vtab *vtab) {
  picoQLTable *picoQL = (picoQLTable *)vtab;
<%      if @container_class.length > 0 %>
  picoQL->object = 0;
<%        if !@@C_container_types.include?(@container_class) %>
  if (cur != NULL) {
    picoQLTableCursor *stc = (picoQLTableCursor *)cur;
<%          /\*/.match(@signature_pointer) == nil ? retype = "#{@signature}*" : retype = "#{@signature}" %>
<%# stc->source will definitely hold a pointer so retyping the signature
<%# as follows is correct. %>
    <%= retype %> any_dstr = (<%= retype %>)stc->source;
<%          if $argD == "DEBUG" %>
#line <%= @signature_line + 1 %> "<%= $argF %>" 
<%          end %>
    return any_dstr->size();
  }
<%        end %>
<%      else %>
  (void)cur;
  picoQL->object = 1;
<%      end %>
  return 1;
}


void <%= @name %>_vt::operator() (sqlite3_vtab *vtab, sqlite3_vtab_cursor *cur) {
<%      if $lock.active == 1 && @container_class.length > 0 %>
  picoQLTable *picoQL = (picoQLTable *)vtab;
  if (!picoQL->locked)
    <%= $lock.lock_function %>;
  picoQL->locked += 1;
<%      else %>
  (void)vtab;
<%      end %>
  (void)cur;
}

int <%= @name %>_vt::operator() (sqlite3_vtab_cursor *cur) {
  picoQLTableCursor *stc = (picoQLTableCursor *)cur;
<%    if @container_class.length > 0 %>
  ResultSet *rs = &cursors[cur];
  if ((int)rs->res.size() > 0) {
    if (rs->resultSetIterState == -1) {
      rs->offset = (int)rs->resBts.find_first();
      rs->resIter = rs->res.begin();
      rs->resultSetIterState = 1;
    } else if (rs->resultSetIterState == 1) {
      rs->resIter++;
      rs->offset = (int)rs->resBts.find_next(rs->offset);
    }
    if (rs->resIter < rs->res.end()) {
#ifdef PICO_QL_DEBUG
  picoQLTable *st = (picoQLTable *)cur->pVtab;
  printf("Table %s, now rs->offset: %i \nstc->isEof: %i\n\n",
         st->zName, rs->offset, stc->isEof);
#endif
      return SQLITE_OK;
    }
  }
  stc->isEof = 1;
  rs->resultSetIterState = -1;
  rs->res.clear();
  rs->resBts.clear();
<%    else %>
  stc->offset++;
  if (stc->offset >= stc->size)
    stc->isEof = 1;
<%    end %>
#ifdef PICO_QL_DEBUG
  picoQLTable *st = (picoQLTable *)cur->pVtab;
  printf("Table %s, stc->isEof: %i\n\n",
         st->zName, stc->isEof);
  printf("stc->offset: %i, stc->size: %i\n", stc->offset, stc->size);
#endif
  return SQLITE_OK;
}

void <%= @name %>_vt::operator() (sqlite3_vtab_cursor *cur, void *shadowRes) {
  (void)shadowRes;
#ifdef PICO_QL_HANDLE_TEXT_ARRAY
  textVector.clear();
#endif
  if (cursors.find(cur) != cursors.end()) {
<%      if @container_class.length > 0 %>
    ResultSet *rs = &cursors[cur];
    rs->res.clear();
    rs->resBts.clear();
<%      end %>
    cursors.erase(cur);
  } else
    printf("No such cursor %li inserted\n", (long int)cur);
<%      if @base_var.length == 0 %>
  charged.clear();
  recursive = 0;
<%      end %>
<%      if $lock.active == 1 && @container_class.length > 0 %>
  picoQLTable *picoQL = (picoQLTable *)cur->pVtab;
  if (picoQL->locked == 1)
    <%= $lock.unlock_function %>;
  picoQL->locked -= 1;
<%      end %>
}


/* Inform the virtual table that it will be used in the
 * query being planned.
 */
void <%= @name %>_vt::operator() (sqlite3_vtab *vtab) {
  picoQLTable *pico = (picoQLTable *)vtab;
  picoQL = pico;
#ifdef PICO_QL_DEBUG
  printf("Table %s, picoQL %lx set to open in this query.\n", picoQL->zName, (long)picoQL);
#endif
}

// Returns the size (records) for each virtual table.
size_t <%= @name %>_vt::operator() (sqlite3_vtab_cursor *cur, sqlite3_vtab *vtab) {
  picoQLTable *picoQL = (picoQLTable *)vtab;
<%      if !@container_class.empty? %>
  picoQL->object = 0;
<%        if !@@C_container_types.include?(@container_class) %>
  if (cur != NULL) {
    picoQLTableCursor *stc = (picoQLTableCursor *)cur;
<%          /\*/.match(@signature_pointer) == nil ? retype = "#{@signature}*" : retype = "#{@signature}" %>
<%# stc->source will definitely hold a pointer so retyping the signature
<%# as follows is correct. %>
    <%= retype %> any_dstr = (<%= retype %>)stc->source;
<%          if $argD == "DEBUG" %>
#line <%= @signature_line + 1 %> "<%= $argF %>" 
<%          end %>
    return any_dstr->size();
  }
<%        end %>
<%      else %>
  (void)cur;
  picoQL->object = 1;
<%      end %>
  return 1;
}


int <%= @name %>_vt::operator() (sqlite3_vtab *vtab, sqlite3_vtab_cursor *cur) {
  picoQLTableCursor *stcsr = (picoQLTableCursor *)cur;
<%      if !@base_var.empty? && @lock != nil %>
  picoQLTable *picoQL = (picoQLTable *)vtab;
  if (!picoQL->locked) {
<%        if !@lock.argument.empty? %>
<%          if /\*/.match(@signature_pointer) == nil %>
<%                sign_retype = "#{@signature}*" %>
<%          else %>
<%                sign_retype = "#{@signature}" %>
<%          end %>
<%          if @lock.argument.match(/any_dstr/) %>
    if (!stcsr->isInstanceNULL) {
      <%= sign_retype %> any_dstr = (<%= sign_retype %>)stcsr->source;
      <%= @lock.lock_function.gsub("<selector>", "#{@lock.argument}") %>;
    }
<%          else %>
    <%= @lock.lock_function.gsub("<selector>", "#{@lock.argument}") %>;
<%          end %>
<%        else %>
    <%= @lock.lock_function %>;
<%        end %>
  }
  picoQL->locked += 1;
<%      else %>
  (void)vtab;
<%      end %>
  if (cursors.find(cur) == cursors.end()) {
<%      if !@container_class.empty? %>
<%        if @@C_container_types.include?(@container_class) || !@loop.empty? %>
<%          @pointer.match(/\*/) || @type.end_with?("::iterator") ? retype = "#{@type}" : retype = "#{@type}*" %>
    vector<<%= @type %>> res;
<%        else %>
    vector<<%= @signature.chomp('*') %>::iterator> res;
<%        end %>
    ResultSet r(stcsr->max_size, -1, -1, res.begin());
    pair<map<sqlite3_vtab_cursor *, ResultSet>::iterator, bool> inserted = cursors.insert(pair<sqlite3_vtab_cursor *, ResultSet>(cur, r));
#ifdef PICO_QL_DEBUG
    printf("Table %s, Cursor: inserted %d, max size %d, resBts size %d\n", ((picoQLTable *)cur->pVtab)->zName, (int)inserted.second, stcsr->max_size, (int)cursors[cur].resBts.size());
#endif
  } else {
    ResultSet *rs = &cursors[cur];
    rs->set(stcsr->max_size, -1, -1, rs->res.begin());
  }
<%      else %>
    (void)stcsr;
    pair<set<sqlite3_vtab_cursor *>::iterator, bool> inserted = cursors.insert(cur);
#ifdef PICO_QL_DEBUG
    printf("Table %s, sqlite3_cursor %lx: inserted %d\n", ((picoQLTable *)cur->pVtab)->zName, (long)cur, (int)inserted.second);
#endif
  }  
<%      end %>
  map<sqlite3_vtab_cursor *, Cursor>::iterator c_map_iter;
  if ((c_map_iter = c_map.find(cur)) != c_map.end()) {
    c_map_iter->second.open = 1;
    c_map_iter->second.counter++;
  } else {
    c_map.insert(pair<sqlite3_vtab_cursor *, Cursor>(cur, Cursor(cur, 1, 1)));
#ifdef PICO_QL_DEBUG
    printf("Table %s, sqlite3 cursor: %lx inserted, max size %d.\n", ((picoQLTable *)cur->pVtab)->zName, (long int)cur, ((picoQLTableCursor *)cur)->max_size);
#endif
  }
#ifdef PICO_QL_DEBUG
  printf("Table %s_vt_init_result_set search is active on Cursor %lx, sqlite3 cursor %lx, cursors size %d.\n", ((picoQLTable *)cur->pVtab)->zName, (long)&c_map[cur], (long)cur, (int)c_map.size());
#endif
  return SQLITE_OK;
}

int <%= @name %>_vt::operator() (sqlite3_vtab_cursor *cur) {
  picoQLTableCursor *stc = (picoQLTableCursor *)cur;
<%    if !@container_class.empty? %>
  ResultSet *rs = &cursors[cur];
  if ((int)rs->res.size() > 0) {
    if (rs->resultSetIterState == -1) {
      rs->offset = (int)rs->resBts.find_first();
      rs->resIter = rs->res.begin();
      rs->resultSetIterState = 1;
    } else if (rs->resultSetIterState == 1) {
      rs->resIter++;
      rs->offset = (int)rs->resBts.find_next(rs->offset);
    }
    if (rs->resIter < rs->res.end()) {
#ifdef PICO_QL_DEBUG
  picoQLTable *st = (picoQLTable *)cur->pVtab;
  printf("Table %s, now rs->offset: %d \nstc->isEof: %d\n\n",
         st->zName, rs->offset, stc->isEof);
#endif
      return SQLITE_OK;
    }
  }
  stc->isEof = 1;
  rs->resultSetIterState = -1;
  rs->res.clear();
  rs->resBts.clear();
<%    else %>
  stc->offset++;
  if (stc->offset >= stc->size)
    stc->isEof = 1;
<%    end %>
<%    if @base_var.empty? %>
<%      if @lock != nil %>
  if (stc->isEof == 1) {
    if (stc->locked == 1) {
<%        if !@lock.argument.empty? %>
<%          if /\*/.match(@signature_pointer) == nil %>
<%            sign_retype = "#{@signature}*" %>
<%          else %>
<%            sign_retype = "#{@signature}" %>
<%          end %>
<%          if @lock.argument.match(/any_dstr/) %>
      if (!stc->isInstanceNULL) {
        <%= sign_retype %> any_dstr = (<%= sign_retype %>)stc->source;
        <%= @lock.unlock_function.gsub("<selector>", "#{@lock.argument}") %>;
      }
<%          else %>
      <%= @lock.unlock_function.gsub("<selector>", "#{@lock.argument}") %>;
<%          end %>
      stc->lock = 0;
<%        else %>
      <%= @lock.unlock_function %>;
<%        end %>
      stc->locked -= 1;
    }
  }
<%      end %>
<%    end %>
#ifdef PICO_QL_DEBUG
  picoQLTable *st = (picoQLTable *)cur->pVtab;
  printf("Table %s, stc->isEof: %d\n\n",
         st->zName, stc->isEof);
  printf("stc->offset: %d, stc->size: %d\n", stc->offset, stc->size);
#endif
  return SQLITE_OK;
}

void <%= @name %>_vt::operator() (sqlite3_vtab_cursor *cur, void *shadowRes) {
  (void)shadowRes;
#ifdef PICO_QL_HANDLE_TEXT_ARRAY
  textVector.clear();
#endif
  if (cursors.find(cur) != cursors.end()) {
<%      if !@container_class.empty? %>
    ResultSet *rs = &cursors[cur];
    rs->res.clear();
    rs->resBts.clear();
<%      end %>
    Cursor *c = &c_map[cur];
    c->open = 0;
  } else
    printf("No such cursor %li inserted\n", (long int)cur);
<%      if !@base_var.empty? %>
<%        if @lock != nil %>
  picoQLTable *picoQL = (picoQLTable *)cur->pVtab;
  if (picoQL->locked == 1) {
<%          if !@lock.argument.empty? %>
<%            if /\*/.match(@signature_pointer) == nil %>
<%              sign_retype = "#{@signature}*" %>
<%            else %>
<%              sign_retype = "#{@signature}" %>
<%            end %>
<%            if @lock.argument.match(/any_dstr/) %>
    picoQLTableCursor *stcsr = (picoQLTableCursor *)cur;
    if (!stcsr->isInstanceNULL) {
      <%= sign_retype %> any_dstr = (<%= sign_retype %>)stcsr->source;
      <%= @lock.unlock_function.gsub("<selector>", "#{@lock.argument}") %>;
    }
<%            else %>
    <%= @lock.unlock_function.gsub("<selector>", "#{@lock.argument}") %>;
<%            end %>
<%          else %>
    <%= @lock.unlock_function %>;
<%          end %>
  }
  picoQL->locked -= 1;
<%        end %>
<%      end %>
}


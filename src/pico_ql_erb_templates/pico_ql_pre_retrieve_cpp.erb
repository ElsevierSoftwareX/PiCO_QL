// Retrieves column values of virtual table <%= @name %>.
int <%= @name %>_vt::operator() (sqlite3_vtab_cursor *cur, int nCol, sqlite3_context *con) {
<%    if @container_class.length > 0 %>
  ResultSet *rs = &cursors[cur];
<%    end %>
  if (struct_is_empty_null(cur, con)) return SQLITE_OK; 
<%    if /\*/.match(@signature_pointer) == nil %>
<%      sign_retype = "#{@signature}*" %>
<%    else %>
<%      sign_retype = @signature %>
<%    end %>
<%    if @container_class.length == 0 || @base_var.length == 0 %>
  picoQLTableCursor *stcsr = (picoQLTableCursor *)cur;
  <%= sign_retype %> any_dstr = (<%= sign_retype %>)stcsr->source;
<%        if $argD == "DEBUG" %>
#line <%= @signature_line + 1 %> "<%= $argF %>" 
<%        end %>
<%    end %>
#ifdef PICO_QL_DEBUG
  picoQLTable *picoQL = (picoQLTable *)cur->pVtab;
<%    if @container_class.length > 0 %>
  printf("Retrieving column %i of VT %s element %i\n", nCol, picoQL->zName, rs->offset);
<%    else %>
  printf("Retrieving column %i of VT %s\n", nCol, picoQL->zName);
<%    end %>
#endif

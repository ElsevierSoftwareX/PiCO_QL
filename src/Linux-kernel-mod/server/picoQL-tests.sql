SELECT * FROM Process_VT;
SELECT * FROM Process_VT JOIN EVirtualMem_VT ON EVirtualMem_VT.base = Process_VT.vm_id;
SELECT P1.name, F1.inode_name, P2.name, F2.inode_name FROM Process_VT as P1 JOIN EFile_VT as F1 ON  F1.base = P1.fs_fd_file_id, Process_VT as P2 JOIN EFile_VT as F2 ON  F2.base = P2.fs_fd_file_id WHERE P1.pid <> P2.pid AND F1.path_mount = F2.path_mount AND F1.path_dentry = F2.path_dentry AND F1.inode_name NOT IN ('null', '');
SELECT DISTINCT P1.name, F1.inode_name, P2.name, F2.inode_name FROM Process_VT as P1 JOIN EFile_VT as F1 ON  F1.base = P1.fs_fd_file_id, Process_VT as P2 JOIN EFile_VT as F2 ON  F2.base = P2.fs_fd_file_id WHERE P1.pid <> P2.pid AND F1.path_mount = F2.path_mount AND F1.path_dentry = F2.path_dentry AND F1.inode_name NOT IN ('null', '');
SELECT GE.name, GE.cred_uid, GE.ecred_euid, GE.ecred_egid, GE.gid FROM ( SELECT name, cred_uid, ecred_euid, ecred_egid, G.gid FROM Process_VT AS P JOIN EGroup_VT AS G ON G.base=P.group_set_id WHERE NOT EXISTS ( SELECT gid FROM EGroup_VT WHERE EGroup_VT.base = P.group_set_id AND gid IN (4,27))) GE WHERE GE.cred_uid > 0 AND GE.ecred_euid = 0;
SELECT DISTINCT P.name, F.inode_name, F.inode_mode&400, F.inode_mode&40, F.inode_mode&4, F.fowner_euid, P.ecred_fsuid, F.fcred_egid, F.fmode&1 FROM Process_VT AS P JOIN EFile_VT AS F ON F.base=P.fs_fd_file_id WHERE F.fmode&1 AND (F.fowner_euid != P.ecred_fsuid OR NOT F.inode_mode&400) AND (F.fcred_egid NOT IN ( SELECT gid FROM EGRoup_VT AS G WHERE G.base = P.group_set_id) OR NOT F.inode_mode&40) AND NOT F.inode_mode&4;
SELECT P.name, P.pid, EP.name, EP.pid, ET.name, ET.pid FROM Process_VT as P JOIN EProcessChild_VT as EP ON EP.base=P.children_id JOIN EThread_VT as ET ON ET.base=P.thread_group_id WHERE NOT P.exit_state&~-512 AND EP.exit_state&~-512 AND ET.exit_state&~-512 AND EP.parent_id=ET.base;
SELECT P.name, P.pid, EP.name, EP.pid, ET.name, ET.pid, EP.thread_group_id, ET.thread_group_id, EP.children_id, ET.children_id FROM (SELECT name, pid, children_id, thread_group_id,exit_state FROM Process_VT WHERE pid>0) P JOIN EprocessChild_VT AS EP ON EP.base=P.children_id JOIN Ethread_VT AS ET ON ET.base=P.thread_group_id WHERE NOT P.exit_state&~-512;
SELECT P.name, P.pid, EP.name, EP.pid, ET.name, ET.pid, EP.thread_group_id, ET.thread_group_id, EP.children_id, ET.children_id FROM (SELECT DISTINCT name, pid, children_id, thread_group_id,exit_state FROM Process_VT WHERE pid>0) P JOIN EprocessChild_VT AS EP ON EP.base=P.children_id JOIN Ethread_VT AS ET ON ET.base=P.thread_group_id WHERE NOT P.exit_state&~-512;
SELECT P.name, P.pid, P.tgid, PIO.bytes_read, PIO.bytes_written, SUM(ETIO.bytes_read), SUM(ETIO.bytes_written), PIO.bytes_read + SUM(ETIO.bytes_read), PIO.bytes_written + SUM(ETIO.bytes_written) FROM Process_VT as P JOIN EIO_VT as PIO ON PIO.base=P.io_id JOIN EThread_VT as ET ON ET.base=P.thread_group_id JOIN EIO_VT as ETIO ON ETIO.base=ET.io_id GROUP BY ET.tgid;
SELECT name, pid, free_area_cache, cached_hole_size, users, counter, map_count, total_vm, shared_vm FROM Process_VT AS P JOIN EVirtualMem_VT AS VM ON VM.base = P.vm_id ORDER BY total_vm, shared_vm, cached_hole_size;
SELECT RtoAlgorithm, RtoMin, RtoMax, MaxConn, ActiveOpens, PassiveOpens, AttemptFails, EstabResets, CurrEstab, InSegs, OutSegs, RetransSegs, InErrs, InErrs*100/InSegs, OutRsts, OutRsts*100/OutSegs FROM Nsproxy_VT AS NPRX JOIN ENetNamespace_VT AS NMSP ON NMSP.base = NPRX.net_ns_id JOIN ENetMib_VT as NMB ON NMB.base = NMSP.netns_mib_id JOIN ETcpStat_VT AS TCP ON TCP.base = NMB.tcp_stats_id WHERE InErrs*100/InSegs > 20 OR OutRsts*100/OutSegs > 20;
SELECT * FROM Nsproxy_VT AS NPRX JOIN ENetNamespace_VT AS NMSP ON NMSP.base = NPRX.net_ns_id JOIN ESock_VT as Sock ON Sock.base = NMSP.rtnl_sock_id JOIN ERcvQueue_VT AS RCVQ ON RCVQ.base = Sock.receive_queue_id;
SELECT * FROM NetNamespace_VT JOIN ENetDevice_VT ON ENetDevice_VT.base=NetNamespace_VT.dev_list_id;
